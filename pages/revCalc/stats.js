import axios from "axios";
import moment from "moment";
import React, { useEffect, useState } from "react";
import {
  Dimensions,
  Image,
  ScrollView,
  StyleSheet,
  Text,
  View
} from "react-native";
import { BarChart, ContributionGraph } from "react-native-chart-kit";
import tw from "tailwind-react-native-classnames";
import PolarBear from "../../assets/polar-bear.png";
import Error from "../../components/Error";
import Loading from "../../components/Loading";
import firebase from "../../config/firebaseConfig";
import { useAuth } from "../../contexts/authContext";
import { useLocation } from "../../contexts/locationContext";
import { colors, fonts } from "../../styles/global";

const Stats = () => {
  const [selectedData, setSelectedData] = useState(null);
  const [powerData, setPowerData] = useState(null);
  const [comparisonData, setComparisonData] = useState(null);
  const [noData, setNoData] = useState(false);

  const { currentUser } = useAuth();
  const { location } = useLocation();

  const handleCompare = (value) => {
    setSelectedData(value);
    setNoData(false);
    const url = `https://power.larc.nasa.gov/api/temporal/daily/point?parameters=ALLSKY_SFC_SW_DWN&community=RE&longitude=${
      location.coords.longitude
    }&latitude=${location.coords.longitude}&start=${moment(value.date).format(
      "YYYYMMDD"
    )}&end=${moment(value.date).format("YYYYMMDD")}&format=JSON`;
    axios
      .get(url)
      .then((response) => {
        const irradiance =
          response.data.properties.parameter["ALLSKY_SFC_SW_DWN"][
            moment(value.date).format("YYYYMMDD")
          ];

        if (irradiance < 0) {
          setNoData(true)
          return
        }
        const energy = irradiance * 1.8;
        setComparisonData({
          labels: ["Output", "Expected"],
          datasets: [
            {
              data: [value.count, energy],
            },
          ],
        });
      })
      .catch((e) => {
        setNoData(true);
        setComparisonData([value.count, 0]);
      });
  };

  useEffect(() => {
    let db = firebase.firestore();
    db.collection("powerData")
      .where("user", "==", currentUser.uid)
      .onSnapshot((snapshot) => {
        setPowerData(
          snapshot.docs.map((doc) => ({
            date: `${doc.data().date.slice(0, 4)}-${doc
              .data()
              .date.slice(4, 6)}-${doc.data().date.slice(6, 8)}`,
            count: doc.data().power,
          }))
        );
      });
  }, [currentUser]);


  return (
    <ScrollView
      style={tw.style(` flex h-full`, {
        backgroundColor: colors.bg1,
      })}
    >
      <Text
        style={tw.style("text-lg mx-8 mb-4 mt-4", {
          fontFamily: fonts.semibold,
          color: colors.text1,
        })}
      >
        Summary of Energy Generated by Your Solar Panel:
      </Text>
      {powerData ? (
        <ContributionGraph
          values={powerData}
          endDate={new Date(new Date())}
          numDays={105}
          width={Dimensions.get("window").width}
          height={220}
          chartConfig={chartConfig}
          onDayPress={(value) => {
            handleCompare(value);
          }}
        />
      ) : (
        <View style={tw`items-center justify-center w-full`}>
          <Loading />
        </View>
      )}

      <View style={tw.style("p-4 mx-8 rounded-lg bg-gray-700 mt-8", {})}>
        <Image
          source={PolarBear}
          style={tw.style("w-16 h-16 z-50 absolute right-10 top-4")}
        />
        <Text
          style={tw.style("text-gray-200", {
            fontFamily: fonts.semibold,
            fontSize: 16,
          })}
        >
          {!selectedData?.count
            ? "1 kW-hr "
            : `On ${moment(selectedData.date).format("DD/MM/YYYY")}, you `}
          reduce{" "}
        </Text>
        <Text
          style={tw.style("text-2xl my-2", {
            color: colors.text1,
            fontFamily: fonts.bold,
          })}
        >
          {selectedData?.count > 0
            ? parseFloat(0.92 * selectedData.count).toFixed(2)
            : 0.92}{" "}
          lb
        </Text>
        <Text style={tw.style("text-gray-300", { fontFamily: fonts.regular })}>
          off your daily carbon footprint. If you want to do something good for
          the planet reduce your carbon footprint. The polar bears will thank
          you.
        </Text>
      </View>

      <View
        style={tw.style("items-center my-8 rounded-xl py-4 mx-8", {
          backgroundColor: colors.bg1,
        })}
      >
        <Text
          style={tw.style("text-gray-200 mb-6", {
            fontFamily: fonts.semibold,
            fontSize: 16,
          })}
        >
          Generated vs Expected energy (
          {moment(selectedData?.date).format("DD/MM/YYYY")})
        </Text>

        {selectedData && comparisonData && !noData ? (
          <BarChart
            data={comparisonData}
            width={Dimensions.get("window").width - 60}
            height={220}
            chartConfig={{
              ...chartConfig,
              backgroundGradientFrom: colors.bg1,
              backgroundGradientTo: colors.bg1,
            }}
            fromZero={true}
            style={{
              paddingVertical: 8,
              borderRadius: 16,
            }}
          />
        ) : selectedData && noData ? (
          <Error
            error={{
              message: "No data available in NASA API to compare for this day.",
            }}
          />
        ) : (
          <Error
            error={{ message: "Select a day from the heat map to compare" }}
          />
        )}
      </View>
    </ScrollView>
  );
};

export default Stats;

const chartConfig = {
  backgroundGradientFrom: colors.bg2,
  backgroundGradientFromOpacity: 1,
  backgroundGradientTo: colors.bg2,
  backgroundGradientToOpacity: 1,
  color: (opacity = 1) => `rgba(255, 255, 255, ${opacity || 1})`,
  strokeWidth: 2, // optional, default 3
  barPercentage: 0.5,
  useShadowColorFromDataset: false, // optional
};

const styles = StyleSheet.create({});

const data = {
  labels: ["Output", "Expected"],
  datasets: [
    {
      data: [20, 45],
    },
  ],
};
